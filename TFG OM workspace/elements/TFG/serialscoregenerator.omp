; OM File Header - Saved 2014/06/17 17:40:58
; (6.080004 :patc (om-make-point 280 10) (om-make-point -4 -4) (om-make-point 1280 734) "" 183 0 "2014/04/07 17:14:23" "2014/06/17 13:27:14")
; End File Header
; External resources 
; (list (list (quote :abstraction) "#P\"C:LispFunction.oml\""))
(in-package :om)(load-lib-for (quote ("twelvetonelib")))(setf *om-current-persistent* (om-load-patch1 "serialscoregenerator" (quote ((om-load-boxcall (quote genfun) "GESTIONOCTAVAS 2" (quote mfl::gestionoctavas) (quote ((om-load-inputfun (quote input-funbox) "" "LISTANOTAS" nil) (om-load-inputfun (quote input-funbox) "" "THRESHOLD" nil) (om-load-inputfun (quote input-funbox) "" "MAXOCTAVA" nil) (om-load-inputfun (quote input-funbox) "" "MINOCTAVA" nil))) (om-make-point 385 301) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 910 271) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM- 4" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 3))) (om-make-point 400 185) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM- 3" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 3))) (om-make-point 431 180) nil nil nil nil 1) (om-load-boxcall (quote abstraction) "getScoreParameters" (om-load-patch-abs1 "getScoreParameters" (quote ((om-load-boxcall (quote lispfun) "NTH 14" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" 13) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 868 385) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "NTH 13" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" 12) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 818 384) nil nil nil nil 1) (om-load-boxout "output 14" 13 (om-make-point 851 447) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxout "output 13" 12 (om-make-point 801 447) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxcall (quote lispfun) "NTH 12" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" 11) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 768 384) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "NTH 11" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" 10) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 718 384) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "NTH 10" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" 9) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 668 384) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "NTH 9" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" 8) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 615 384) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "NTH 8" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" 6) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 515 384) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "NTH 7" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" 7) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 565 384) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "NTH 6" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" 5) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 465 384) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "NTH 5" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" 4) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 415 384) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "NTH 4" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" 3) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 364 384) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "NTH 3" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" 2) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 315 384) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "NTH 2" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" 1) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 265 384) nil nil nil nil 1) (om-load-boxout "output 12" 11 (om-make-point 751 447) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxout "output 11" 10 (om-make-point 701 447) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxout "output 10" 9 (om-make-point 651 447) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxout "output 9" 8 (om-make-point 601 447) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxout "output 8" 7 (om-make-point 551 447) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxout "output 7" 6 (om-make-point 501 447) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxout "output 6" 5 (om-make-point 451 447) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxout "output 5" 4 (om-make-point 401 447) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxout "output 4" 3 (om-make-point 350 446) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxout "output 3" 2 (om-make-point 301 447) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxout "output 2" 1 (om-make-point 251 447) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxout "output" 0 (om-make-point 201 447) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxcall (quote lispfun) "NTH" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" 0) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 210 384) nil nil nil nil 1) (om-load-boxwithed1 (quote box-with-win) "FILE-BOX" (quote file-box) (quote nil) (om-make-point 511 37) nil nil nil (list (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 218 39) (om-make-point 131 28) "scoreParameters.txt" "\"scoreParameters.txt\"" nil) (om-load-boxcall (quote genfun) "FILE-READ-LINE" (quote file-read-line) (quote ((om-load-inputfun (quote input-funbox) "a file pointer" "STREAM" nil))) (om-make-point 280 239) nil nil nil nil 1) (let ((box (om-load-boxcall (quote genfun) "StreamFile" (quote streamfile) (quote ((om-load-inputfun (quote input-funbox) "pathname or string" "PATHNAME" nil))) (om-make-point 263 154) nil nil nil nil 1))) (setf (filetype box) (quote text) (direction box) :input (if-ex box) :rename) box) (om-load-boxcall (quote genfun) "INFILE" (quote infile) (quote ((om-load-inputfun (quote input-funbox) "file name" "NAME" "parameters.txt"))) (om-make-point 275 66) nil nil nil nil 1) (om-load-seqbox "init" (quote initdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 109 337) nil nil nil 0) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 299 337) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 199 337) nil nil nil 0)) (quote ((2 0 1 0 nil 0) (3 0 2 0 nil 0) (0 0 3 0 nil 0) (1 0 5 0 nil 0))) 1 "file-box" nil) (om-load-boxcall (quote patch-box) "LispFunction" (quote ("elements" "TFG" "LispFunction")) (quote ((om-load-inputfun (quote input-funbox) "" "STRING" nil))) (om-make-point 500 140) nil (list (list 3 20 50 2 4 4 4 1 4 8 1 16) 28) nil nil 1) (om-load-boxcomment "comment 3" (om-make-point 100 60) (quote "Aquí se carga la lista de parámetros de la interfaz") "" (om-make-point 559 42) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 2" (om-make-point 100 60) (quote "Convierto la string en una lista") "" (om-make-point 561 144) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (quote ((29 0 0 1 nil 0) (29 0 1 1 nil 0) (0 0 2 0 nil 0) (1 0 3 0 nil 0) (29 0 4 1 nil 0) (29 0 5 1 nil 0) (29 0 6 1 nil 0) (29 0 7 1 nil 0) (29 0 8 1 nil 0) (29 0 9 1 nil 0) (29 0 10 1 nil 0) (29 0 11 1 nil 0) (29 0 12 1 nil 0) (29 0 13 1 nil 0) (29 0 14 1 nil 0) (4 0 15 0 nil 0) (5 0 16 0 nil 0) (6 0 17 0 nil 0) (7 0 18 0 nil 0) (9 0 19 0 nil 0) (8 0 20 0 nil 0) (10 0 21 0 nil 0) (11 0 22 0 nil 0) (12 0 23 0 nil 0) (13 0 24 0 nil 0) (14 0 25 0 nil 0) (27 0 26 0 nil 0) (29 0 27 1 nil 0) (28 0 29 0 nil 0))) 6.080004 nil "" (om-make-point -4 -4) (om-make-point 1280 599)) (quote nil) (om-make-point 937 0) nil (list 3 20 50 2 4 4 4 1 4 8 1 16 2 1) nil "getScoreParameters") (om-load-boxcall (quote genfun) "OM- 2" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 17) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 16))) (om-make-point 269 442) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 17) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 1))) (om-make-point 306 458) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM//" (quote om//) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 100) (om-load-inputfun (quote input-funbox) "number or list" "DIVISOR" 25))) (om-make-point 379 452) nil nil nil nil 2) (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 4))) (om-make-point 585 695) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 100 97) (quote "Determinamos la longitud en base a las repeticiones de una serie en una voz") "" (om-make-point 49 366) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxwithed1 (quote box-with-win) "longitud y transporte" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" 3) (om-load-inputfun (quote input-funbox) "" "input 3" nil))) (om-make-point 166 367) nil nil "&" (list (om-load-boxcall (quote genfun) "GESTIONTRANSPORTE" (quote mfl::gestiontransporte) (quote ((om-load-inputfun (quote input-funbox) "" "LISTANOTAS" nil) (om-load-inputfun (quote input-funbox) "" "THRESHOLD" nil))) (om-make-point 334 51) nil nil nil nil 1) (om-load-boxin "input 3" 2 (om-make-point 105 45) "" nil nil nil) (om-load-boxcall (quote genfun) "FLAT 2" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 301 194) nil nil nil nil 1) (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 182 475) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "NTH" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" 0) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 301 87) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 3))) (om-make-point 117 111) nil nil nil nil 1) (om-load-boxcall (quote genfun) "for" (quote forloop) (quote ((om-load-inputfun (quote input-funbox) "low value" "FROM" 1) (om-load-inputfun (quote input-funbox) "high value" "TO" 3))) (om-make-point 14 188) nil nil nil nil 1) (om-load-boxin "input 2" 1 (om-make-point 55 45) "" nil nil nil) (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 218 135) nil nil nil nil 3) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 300 250) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 233 299) nil nil nil 0)) (quote ((8 0 0 0 nil 0) (1 0 0 1 nil 0) (9 1 2 0 nil 0) (5 0 4 0 nil 0) (0 0 4 1 nil 0) (7 0 6 1 nil 0) (4 0 9 0 nil 0) (2 0 10 0 nil 0) (9 0 11 0 nil 0))) 1 "longitud y transporte" nil) (om-load-boxcomment "comment" (om-make-point 100 60) (quote "Parámetro para la frecuencia de silencios") "" (om-make-point 424 451) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 121 77) (quote "Aquí hay que poner un bucle for para determinar la longitud de la voz") "" (om-make-point 317 344) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxwithed1 (quote box-with-win) "longitud notas" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" 5) (om-load-inputfun (quote input-funbox) "" "input 3" 1) (om-load-inputfun (quote input-funbox) "" "input 4" 16))) (om-make-point 253 537) nil nil nil (list (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 371 288) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 189 194) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM* 3" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" -1) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 224 142) nil nil nil nil 1) (om-load-boxin "input 4" 3 (om-make-point 155 45) "" nil nil nil) (om-load-boxin "input 3" 2 (om-make-point 105 45) "" nil nil nil) (om-load-boxin "input 2" 1 (om-make-point 55 45) "" nil nil nil) (om-load-boxcall (quote lispfun) "=" (quote =) (quote ((om-load-inputfun (quote input-funbox) "NUM" "NUM" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" 1))) (om-make-point 110 209) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM-RANDOM 2" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 5))) (om-make-point 93 142) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM* 2" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 1) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 286 148) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" -1) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" 1))) (om-make-point 97 282) nil nil nil nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 45 118) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 250) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 4))) (om-make-point 367 130) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 1) (om-load-inputfun (quote input-funbox) "max" "HIGH" 16))) (om-make-point 339 56) nil nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 338 211) nil nil nil nil 3) (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 424 299) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 203 277) nil nil nil 0)) (quote ((13 1 0 0 nil 0) (2 0 1 0 nil 0) (8 0 1 1 nil 0) (11 0 2 1 nil 0) (7 0 6 0 nil 0) (5 0 7 1 nil 0) (11 0 8 1 nil 0) (6 0 9 0 nil 0) (1 0 9 1 nil 0) (8 0 9 2 nil 0) (14 0 10 0 nil 0) (12 0 11 1 nil 0) (4 0 12 0 nil 0) (3 0 12 1 nil 0) (9 0 13 0 nil 0) (0 0 15 0 nil 0) (13 0 16 0 nil 0))) 1 "longitud notas" nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 30) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 2))) (om-make-point 972 354) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM-RANDOM 2" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 1) (om-load-inputfun (quote input-funbox) "max" "HIGH" 8))) (om-make-point 946 264) nil nil nil nil 1) (om-load-editor-box1 "VOICE" (quote voice) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a list representing a rhythm tree" "tree" (list (quote ?) (list (list (list 4 4) (list 1 1 1 1))))) (om-load-inputfun (quote input-funbox) "a chord object, a list of chords, a list of midics, a list of lists of midics..." "chords" (list (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord))) (om-load-inputfun (quote input-funbox) "frequency of the quarter-note (default 60/mn)" "tempo" 60) (om-load-inputfun (quote input-funbox) "overlapping percentage between every successive chords, calculated from the second chord's duration" "legato" 100) (om-load-inputfun (quote input-funbox) "sub lists (one sub list per chord) indicating notes to be tied to notes of the same value, in a next chord" "ties" nil))) (om-make-point 518 481) (om-make-point 462 133) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (103/4 (((4 4) ((1 (1 1)) 3.0)) ((4 4) ((1 (1.0 -1)) -3)) ((4 4) (2 (1 (1.0 1)) 1.0)) ((4 4) (2.0 1 (1 (1.0 3)))) ((4 4) (4)) ((4 4) ((1 (3 1)) 2.0 (1 (1.0 -1)))) ((4 4) (-3 (1 (-1 3)))) ((4 4) (3.0 1)) ((4 4) (3.0 1)) ((4 4) (-2 (1 (-1 3)) (1 (1.0 3)))) ((4 4) ((1 (1.0 1)) 1.0 (1 (1.0 3)) 1.0)) ((4 4) ((1 (1.0 1)) 1.0 (1 (1.0 3)) (1 (1.0 -1)))) ((4 4) (-1 (1 (-1 3)) 2.0)) ((4 4) ((1 (1.0 3)) 1.0 (1 (3.0 1)) 1.0)) ((4 4) ((1 (1.0 1)) 1.0 (1 (1.0 1)) 1.0)) ((4 4) (1.0 (1 (1.0 1)) 2.0)) ((4 4) (1.0 (1 (1.0 1)) 2.0)) ((4 4) (1.0 -2 1)) ((4 4) (2.0 (1 (1.0 -3)) -1)) ((4 4) ((1 (-1 3)) (1 (3.0 1)) (1 (1.0 1)) 1.0)) ((4 4) ((1 (1.0 -3)) -1 (1 (-1 1)) 1.0)) ((4 4) (2.0 1 (1 (1.0 1)))) ((4 4) (2.0 (1 (1.0 1)) 1.0)) ((4 4) (-3 (1 (-2 1 -1)))) ((4 4) (-2 (1 (-1 1)) 1)) ((3 4) ((1 (3.0 -1)) -2))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (2000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (750)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (4000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (750)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (750)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (750)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (750)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (750)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (750)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (750)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (750)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (750)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (250)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (500)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.080004 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point -10 142) (om-make-point 1284 567) 0 1000 nil 1 (quote :midishare) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil) (om-load-boxcall (quote lispfun) "LIST 2" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" (list 1 2)) (om-load-inputfun (quote input-funbox) "add-input" "add-input" (list 3 4)) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 260 190) nil nil nil nil 1) (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 661 347) nil nil nil nil 1) (om-load-boxcall (quote genfun) "FLAT 2" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 605 355) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OMQUANTIFY 2" (quote omquantify) (quote ((om-load-inputfun (quote input-funbox) "durations" "DURS" (list 100)) (om-load-inputfun (quote input-funbox) "Tempo" "TEMPI" 60) (om-load-inputfun (quote input-funbox) "measures" "MEASURES" (list 4 4)) (om-load-inputfun (quote input-funbox) "maximum division" "MAX/" 8))) (om-make-point 796 409) (om-make-point 208 53) nil nil nil 1) (om-load-editor-box1 "CHORD-SEQ 2" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 530 176) (om-make-point 332 151) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6200) (6500) (6900) (6800) (6700) (7000) (7100) (6300) (6400) (6600) (6000) (6100) (6600) (6700) (6100) (6300) (6400) (5600) (5700) (6000) (5900) (5800) (6200) (6500) (5900) (5800) (6400) (6200) (6100) (6900) (6800) (6500) (6600) (6700) (6300) (6000) (6000) (6000) (6000) (6000) (6000) (6000) (6000) (6000) (6000) (6000) (6000) (6000))) :lonset (quote (0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000 13000 14000 15000 16000 17000 18000 19000 20000 21000 22000 23000 24000 25000 26000 27000 28000 29000 30000 31000 32000 33000 34000 35000 36000 37000 38000 39000 40000 41000 42000 43000 44000 45000 46000 47000 47250)) :ldur (quote ((2000) (750) (1000) (2250) (1750) (3250) (1750) (-4000) (500) (-500) (3250) (1250) (-2750) (3750) (2500) (500) (-2750) (750) (1250) (-3000) (3750) (750) (750) (500) (-2500) (500) (3750) (3500) (4000) (3000) (2000) (-3000) (500) (-3500) (3250) (2250) (-4000) (250) (2750) (500) (3750) (2500) (-1750) (1250) (-1750) (1750) (-1750) (250))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.080004 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 0 0 (om-make-point 0 0) (om-make-point 1284 586) 0 1000 nil 1 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote ggff) 24 2)) t nil nil nil) (om-load-boxout "output" 0 (om-make-point 594 782) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxin "input 4" 3 (om-make-point 218 33) "" nil (list 6800 6700 7300 7100 7000 7800 7700 7400 7500 7600 7200 6900) nil) (om-load-boxin "input 3" 2 (om-make-point 145 32) "" nil (list 6900 7200 7600 7500 7400 7700 7800 7000 7100 7300 6700 6800) nil) (om-load-boxin "input 2" 1 (om-make-point 82 31) "" nil (list 7000 7100 6500 6700 6800 6000 6100 6400 6300 6200 6600 6900) nil) (om-load-boxin "input" 0 (om-make-point 17 33) "" nil (list 6900 6600 6200 6300 6400 6100 6000 6800 6700 6500 7100 7000) nil))) (quote ((10 0 0 0 nil 0) (4 2 0 1 nil 0) (2 0 0 2 nil 0) (3 0 0 3 nil 0) (4 5 1 0 nil 0) (4 6 1 1 nil 0) (4 4 2 0 nil 0) (4 3 3 0 nil 0) (4 11 5 1 nil 0) (4 10 6 1 nil 0) (4 1 7 1 nil 0) (16 0 8 0 nil 0) (4 12 8 1 nil 0) (17 0 10 0 nil 0) (4 0 10 1 nil 0) (4 13 10 2 nil 0) (10 0 13 0 nil 0) (7 0 13 1 nil 0) (5 0 13 2 nil 0) (6 0 13 3 nil 0) (15 0 14 1 nil 0) (4 7 15 0 nil 0) (4 8 15 1 nil 0) (20 0 16 1 nil 0) (18 0 16 2 nil 0) (26 0 17 0 nil 0) (25 0 17 1 nil 0) (24 0 17 2 nil 0) (23 0 17 3 nil 0) (21 1 18 0 nil 0) (21 3 19 0 nil 0) (19 0 20 0 nil 0) (14 0 20 1 nil 0) (1 0 20 2 nil 0) (4 9 20 3 nil 0) (0 0 21 1 nil 0) (13 0 21 3 nil 0) (8 0 22 0 nil 0))) nil 6.080004))
