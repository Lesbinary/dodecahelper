; OM File Header - Saved 2014/03/11 21:25:27
; (6.070009 :patc (om-make-point 118 310) (om-make-point 156 5) (om-make-point 524 462) "" 183 0 "2014/03/10 11:29:51" "2014/03/11 21:25:27")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "SerieGenerator" (quote ((om-load-boxcomment "comment" (om-make-point 100 60) (quote "Bucle principal de generación de la serie") nil (om-make-point 252 240) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 100 60) (quote "Separo la serie base") nil (om-make-point 308 111) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 100 60) (quote "Separo los parámetros: min intervalo y max intervalo") nil (om-make-point 29 214) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxwithed1 (quote box-with-win) "OMLOOP" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil) (om-load-inputfun (quote input-funbox) "" "input 3" nil))) (om-make-point 201 215) nil nil nil (list (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 182 249) (om-make-point 26 28) 0 "0" nil) (om-load-boxwithed1 (quote box-with-win) "omloop" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input0" nil))) (om-make-point 430 122) nil nil nil (list (om-load-boxcall (quote lispfun) "FIRST 2" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 193 123) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 403 242) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "REVERSE" (quote reverse) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 357 196) nil nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 309 121) nil nil nil nil 3) (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 1) (om-load-inputfun (quote input-funbox) "max" "HIGH" 12))) (om-make-point 162 35) nil nil nil nil 1) (om-load-boxcall (quote genfun) "while" (quote whileloop) (quote ((om-load-inputfun (quote input-funbox) "condition" "EXPR" 1))) (om-make-point 86 408) nil nil nil nil 0) (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 127 249) (om-make-point 33 28) 12 "12" nil) (om-load-boxcall (quote genfun) "OM<" (quote om<) (quote ((om-load-inputfun (quote input-funbox) "a number" "NUM1" 0) (om-load-inputfun (quote input-funbox) "a number" "NUM2" 1))) (om-make-point 105 298) (om-make-point 20 35) nil nil nil 1) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 80 207) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "REMOVE" (quote remove) (quote ((om-load-inputfun (quote input-funbox) "ITEM" "ITEM" nil) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 93 140) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 489 290) (om-make-point 33 28) 59 "59" nil) (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 438 310) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 495 350) (om-make-point 39 28) 100 "100" nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 455 381) nil nil nil nil 1) (om-load-boxin "input0" 0 (om-make-point 5 40) "" nil (list 1 0 3 0 5 0 7 0 9 0 11 0) nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 460 474) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 287 475) nil nil nil 0)) (quote ((3 0 0 0 nil 0) (2 0 1 0 nil 0) (3 1 2 0 nil 0) (4 0 3 0 nil 0) (7 0 5 0 nil 0) (8 0 7 0 nil 0) (6 0 7 1 nil 0) (9 0 8 0 nil 0) (0 0 9 0 nil 0) (14 0 9 1 nil 0) (1 0 11 0 nil 0) (10 0 11 1 nil 0) (11 0 13 0 nil 0) (12 0 13 1 nil 0) (13 0 15 0 nil 0) (3 0 16 0 nil 0))) 1 "omloop" nil) (om-load-boxcall (quote lispfun) "REVERSE 2" (quote reverse) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 489 629) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "REVERSE" (quote reverse) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 442 555) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 275 140) (om-make-point 33 28) 59 "59" nil) (om-load-boxcall (quote genfun) "OM+ 2" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 231 170) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 292 207) (om-make-point 39 28) 100 "100" nil) (om-load-boxcall (quote genfun) "OM* 2" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 252 238) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM/=" (quote om/=) (quote ((om-load-inputfun (quote input-funbox) "a number" "NUM1" 0) (om-load-inputfun (quote input-funbox) "a number" "NUM2" 0))) (om-make-point 162 298) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "NTH 2" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 145 186) nil nil nil nil 1) (om-load-boxcall (quote genfun) "count" (quote counter) (quote ((om-load-inputfun (quote input-funbox) "things to count" "SOMETHING" 1))) (om-make-point 44 198) nil nil nil nil 3) (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" (quote t)) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 245 329) nil nil nil nil 1) (om-load-boxcall (quote genfun) "while" (quote whileloop) (quote ((om-load-inputfun (quote input-funbox) "condition" "EXPR" nil))) (om-make-point 498 808) nil nil nil nil 0) (om-load-boxcall (quote genfun) "OM<" (quote om<) (quote ((om-load-inputfun (quote input-funbox) "a number" "NUM1" 0) (om-load-inputfun (quote input-funbox) "a number" "NUM2" 12))) (om-make-point 552 745) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 541 686) nil nil nil nil 1) (om-load-boxcall (quote genfun) "REMOVE-DUP" (quote remove-dup) (quote ((om-load-inputfun (quote input-funbox) "list" "LIST" (list 1 2 3 4)) (om-load-inputfun (quote input-funbox) "equality test (function or function name)" "TEST" (quote eq)) (om-load-inputfun (quote input-funbox) "an integer" "DEPTH" 1))) (om-make-point 509 571) nil nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 369 499) nil nil nil nil 3) (om-load-boxin "input 3" 2 (om-make-point 105 45) "" "input 3" (list 1 0 3 0 5 0 7 0 9 0 11 0) nil) (om-load-boxin "input 2" 1 (om-make-point 55 45) "" nil nil nil) (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 434 675) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil) (om-load-inputfun (quote input-funbox) "other oprations" "MORE" nil))) (om-make-point 258 604) nil nil nil 0)) (quote ((17 0 1 0 nil 0) (15 0 2 0 nil 0) (16 1 3 0 nil 0) (9 0 5 0 nil 0) (4 0 5 1 nil 0) (5 0 7 0 nil 0) (6 0 7 1 nil 0) (9 0 8 0 nil 0) (0 0 8 1 nil 0) (10 1 9 0 nil 0) (17 0 9 1 nil 0) (8 0 11 0 nil 0) (7 0 11 1 nil 0) (1 0 11 2 nil 0) (13 0 12 0 nil 0) (14 0 13 0 nil 0) (2 0 14 0 nil 0) (3 0 15 0 nil 0) (11 0 16 0 nil 0) (2 0 20 0 nil 0) (16 0 21 0 nil 0) (10 0 21 1 nil 0))) 1 "omloop" nil) (om-load-boxcall (quote lispfun) "REST 2" (quote rest) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 266 140) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "REST" (quote rest) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 192 111) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SECOND" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 72 120) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 10 122) nil nil nil nil 1) (om-load-boxout "output" 0 (om-make-point 202 322) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxin "input" 0 (om-make-point 55 35) "" nil (list 1 7 1 0 3 0 5 0 7 0 9 0 11 0) nil))) (quote ((7 0 3 0 nil 0) (6 0 3 1 nil 0) (4 0 3 2 nil 0) (5 0 4 0 nil 0) (9 0 5 0 nil 0) (9 0 6 0 nil 0) (9 0 7 0 nil 0) (3 0 8 0 nil 0))) nil 6.070009))
