; OM File Header - Saved 2014/03/21 12:07:06
; (6.080004 :patc (om-make-point 118 310) (om-make-point 212 181) (om-make-point 524 348) "" 183 0 "2014/03/10 11:29:51" "2014/03/21 12:07:06")
; End File Header
; External resources 
; (list (list (quote :abstraction) "#P\"C:LispFunction.oml\""))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "SerieGenerator" (quote ((om-load-boxcomment "comment" (om-make-point 100 60) (quote "Bucle principal de generación de la serie") "" (om-make-point 267 238) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 100 60) (quote "Separo la serie base") "" (om-make-point 308 111) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 100 60) (quote "Separo los parámetros: min intervalo y max intervalo") "" (om-make-point 16 221) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxwithed1 (quote box-with-win) "OMLOOP" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil) (om-load-inputfun (quote input-funbox) "" "input 3" nil))) (om-make-point 218 229) nil nil nil (list (om-load-seqbox "INITDO" (quote initdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 47 590) nil nil nil 0) (om-load-boxwithed1 (quote box-with-win) "file-box" (quote file-box) (quote nil) (om-make-point 25 427) nil nil nil (list (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 193 168) (om-make-point 50 28) "(nil)" "\"(nil)\"" nil) (om-load-boxcall (quote genfun) "OUTFILE" (quote outfile) (quote ((om-load-inputfun (quote input-funbox) "file name" "NAME" ""))) (om-make-point 275 74) nil nil nil nil 1) (om-load-boxcall (quote genfun) "FILE-WRITE-LINE" (quote file-write-line) (quote ((om-load-inputfun (quote input-funbox) "a line to write" "LINE" nil) (om-load-inputfun (quote input-funbox) "a file pointer" "STREAM" nil))) (om-make-point 281 248) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 219 38) (om-make-point 71 28) "serie.txt" "\"serie.txt\"" nil) (let ((box (om-load-boxcall (quote genfun) "StreamFile" (quote streamfile) (quote ((om-load-inputfun (quote input-funbox) "pathname or string" "PATHNAME" nil))) (om-make-point 365 139) nil nil nil nil 1))) (setf (filetype box) (quote text) (direction box) :io (if-ex box) :rename) box) (om-load-seqbox "init" (quote initdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 109 337) nil nil nil 0) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 299 337) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 199 337) nil nil nil 0)) (quote ((3 0 1 0 nil 0) (0 0 2 0 nil 0) (4 0 2 1 nil 0) (1 0 4 0 nil 0) (2 0 6 0 nil 0))) 1 "file-box" nil) (om-load-boxcall (quote abstraction) "lispfunction" (om-load-lisp-abspatch "lispfunction" 6.080004 ";;; Edit a valid LAMBDA EXPRESSION for \"lispfunction\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (arg1) (write-to-string arg1))") (quote ((om-load-inputfun (quote input-funbox) "" "ARG1" (list 1 2 3 5)))) (om-make-point 338 430) nil (list "(1 2 3 5)") nil nil) (om-load-boxwithed1 (quote box-with-win) "FILE-BOX 2" (quote file-box) (quote ((om-load-inputfun (quote input-funbox) "" "input" (list 0 1 2 3)))) (om-make-point 434 503) nil nil nil (list (om-load-boxcall (quote genfun) "OUTFILE" (quote outfile) (quote ((om-load-inputfun (quote input-funbox) "file name" "NAME" ""))) (om-make-point 275 74) nil nil nil nil 1) (om-load-boxcall (quote genfun) "FILE-WRITE-LINE" (quote file-write-line) (quote ((om-load-inputfun (quote input-funbox) "a line to write" "LINE" nil) (om-load-inputfun (quote input-funbox) "a file pointer" "STREAM" nil))) (om-make-point 281 248) nil nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 36 54) "" nil nil nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 219 38) (om-make-point 71 28) "serie.txt" "\"serie.txt\"" nil) (let ((box (om-load-boxcall (quote genfun) "StreamFile" (quote streamfile) (quote ((om-load-inputfun (quote input-funbox) "pathname or string" "PATHNAME" nil))) (om-make-point 365 139) nil nil nil nil 1))) (setf (filetype box) (quote text) (direction box) :io (if-ex box) :rename) box) (om-load-seqbox "init" (quote initdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 109 337) nil nil nil 0) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 299 337) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 199 337) nil nil nil 0)) (quote ((3 0 0 0 nil 0) (2 0 1 0 nil 0) (4 0 1 1 nil 0) (0 0 4 0 nil 0) (1 0 6 0 nil 0))) 1 "file-box" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 182 249) (om-make-point 26 28) 0 "0" nil) (om-load-boxwithed1 (quote box-with-win) "omloop" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input0" nil) (om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 405 127) (om-make-point 44.424805 58) nil nil (list (om-load-boxcall (quote genfun) "OMIF 4" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" 0))) (om-make-point 405 577) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "PRINT 3" (quote print) (quote ((om-load-inputfun (quote input-funbox) "SOMETHING" "SOMETHING" nil))) (om-make-point 509 456) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "PRINT" (quote print) (quote ((om-load-inputfun (quote input-funbox) "SOMETHING" "SOMETHING" nil))) (om-make-point 426 392) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OMIF 3" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 313 648) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OMIF 2" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 59 634) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM- 4" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 6) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 6))) (om-make-point 524 650) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM- 3" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 6))) (om-make-point 498 595) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM> 2" (quote om>) (quote ((om-load-inputfun (quote input-funbox) "a number" "NUM1" 0) (om-load-inputfun (quote input-funbox) "a number" "NUM2" 6))) (om-make-point 444 624) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 446 692) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM>" (quote om>) (quote ((om-load-inputfun (quote input-funbox) "a number" "NUM1" 0) (om-load-inputfun (quote input-funbox) "a number" "NUM2" 1))) (om-make-point 201 727) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM< 3" (quote om<) (quote ((om-load-inputfun (quote input-funbox) "a number" "NUM1" 0) (om-load-inputfun (quote input-funbox) "a number" "NUM2" 1))) (om-make-point 141 727) (om-make-point 20 35) nil nil nil 1) (om-load-boxcall (quote genfun) "OM-ABS" (quote om-abs) (quote ((om-load-inputfun (quote input-funbox) "number or tree" "SELF" 1))) (om-make-point 445 518) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "FIRST 3" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 481 398) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "REVERSE 2" (quote reverse) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 471 335) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM- 2" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 1) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 6))) (om-make-point 430 461) nil nil nil nil 1) (om-load-boxin "input 2" 2 (om-make-point 105 45) "" nil (list 1 0 3 0 5 0 7 0 9 0 11 0) nil) (om-load-boxin "input" 1 (om-make-point 55 45) "" nil 5 nil) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 59))) (om-make-point 758 209) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM/" (quote om/) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 1) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 100))) (om-make-point 810 181) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "REMOVE 2" (quote remove) (quote ((om-load-inputfun (quote input-funbox) "ITEM" "ITEM" nil) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 327 231) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LENGTH 4" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 309 294) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM< 2" (quote om<) (quote ((om-load-inputfun (quote input-funbox) "a number" "NUM1" 0) (om-load-inputfun (quote input-funbox) "a number" "NUM2" 1))) (om-make-point 337 346) (om-make-point 20 35) nil nil nil 1) (om-load-boxcall (quote lispfun) "LENGTH 3" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 349 299) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OMOR" (quote omor) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "other things" "REST" nil) (om-load-inputfun (quote input-funbox) "other things" "REST" nil) (om-load-inputfun (quote input-funbox) "other things" "REST" nil))) (om-make-point 300 489) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LENGTH 2" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 275 239) nil nil nil nil 1) (om-load-boxcall (quote patch-box) "LispFunction" (quote ("elements" "TFG" "LispFunction")) (quote ((om-load-inputfun (quote input-funbox) "" "STRING" nil))) (om-make-point 703 126) nil (list (list 0) 3) nil nil 1) (om-load-boxwithed1 (quote box-with-win) "FILE-BOX" (quote file-box) (quote nil) (om-make-point 747 41) nil nil nil (list (om-load-boxcall (quote genfun) "OUTFILE" (quote outfile) (quote ((om-load-inputfun (quote input-funbox) "file name" "NAME" ""))) (om-make-point 276 83) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 218 40) (om-make-point 71 28) "serie.txt" "\"serie.txt\"" nil) (om-load-boxcall (quote genfun) "FILE-READ-LINE" (quote file-read-line) (quote ((om-load-inputfun (quote input-funbox) "a file pointer" "STREAM" nil))) (om-make-point 280 239) nil nil nil nil 1) (let ((box (om-load-boxcall (quote genfun) "StreamFile" (quote streamfile) (quote ((om-load-inputfun (quote input-funbox) "pathname or string" "PATHNAME" nil))) (om-make-point 263 154) nil nil nil nil 1))) (setf (filetype box) (quote text) (direction box) :input (if-ex box) :rename) box) (om-load-seqbox "init" (quote initdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 109 337) nil nil nil 0) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 299 337) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 199 337) nil nil nil 0)) (quote ((1 0 0 0 nil 0) (3 0 2 0 nil 0) (0 0 3 0 nil 0) (2 0 5 0 nil 0))) 1 "file-box" nil) (om-load-boxcall (quote lispfun) "FIRST 2" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" (list 2)))) (om-make-point 348 150) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 679 267) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "REVERSE" (quote reverse) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 633 221) nil nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 585 146) nil nil nil nil 3) (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 1) (om-load-inputfun (quote input-funbox) "max" "HIGH" 12))) (om-make-point 317 62) nil nil nil nil 1) (om-load-boxcall (quote genfun) "while" (quote whileloop) (quote ((om-load-inputfun (quote input-funbox) "condition" "EXPR" 1))) (om-make-point 307 569) (om-make-point 54.585938 58) nil nil nil 0) (om-load-boxcall (quote genfun) "OM<" (quote om<) (quote ((om-load-inputfun (quote input-funbox) "a number" "NUM1" 0) (om-load-inputfun (quote input-funbox) "a number" "NUM2" 1))) (om-make-point 260 325) (om-make-point 20 35) nil nil nil 1) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 235 234) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "REMOVE" (quote remove) (quote ((om-load-inputfun (quote input-funbox) "ITEM" "ITEM" nil) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 248 167) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 765 315) (om-make-point 33 28) 59 "59" nil) (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 714 335) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 771 375) (om-make-point 39 28) 100 "100" nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 731 406) nil nil nil nil 1) (om-load-boxin "input0" 0 (om-make-point 8 49) "" nil 5 nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 736 499) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 660 503) nil nil nil 0)) (quote ((11 0 0 0 nil 0) (11 0 0 1 nil 0) (12 0 1 0 nil 0) (28 0 2 0 nil 0) (8 0 3 0 nil 0) (9 0 3 1 nil 0) (8 0 4 0 nil 0) (10 0 4 1 nil 0) (6 0 5 1 nil 0) (11 0 6 0 nil 0) (0 0 7 0 nil 0) (7 0 8 0 nil 0) (5 0 8 1 nil 0) (11 0 8 2 nil 0) (8 0 9 0 nil 0) (16 0 9 1 nil 0) (8 0 10 0 nil 0) (40 0 10 1 nil 0) (14 0 11 0 nil 0) (13 0 12 0 nil 0) (17 0 13 0 nil 0) (2 0 14 0 nil 0) (1 0 14 1 nil 0) (18 0 17 0 nil 0) (25 0 18 0 nil 0) (28 0 19 0 nil 0) (17 0 19 1 nil 0) (19 0 20 0 nil 0) (20 0 21 0 nil 0) (22 0 21 1 nil 0) (17 0 22 0 nil 0) (33 0 23 0 nil 0) (21 0 23 1 nil 0) (4 0 23 2 nil 0) (3 0 23 3 nil 0) (15 0 24 0 nil 0) (26 0 25 0 nil 0) (30 0 27 0 nil 0) (29 0 28 0 nil 0) (30 1 29 0 nil 0) (31 0 30 0 nil 0) (23 0 32 0 nil 0) (34 0 33 0 nil 0) (24 0 33 1 nil 0) (35 0 34 0 nil 0) (27 0 35 0 nil 0) (15 0 35 1 nil 0) (28 0 37 0 nil 0) (36 0 37 1 nil 0) (37 0 39 0 nil 0) (38 0 39 1 nil 0) (39 0 41 0 nil 0) (30 0 42 0 nil 0))) 1 "omloop" nil) (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 275 140) (om-make-point 33 28) 59 "59" nil) (om-load-boxcall (quote genfun) "OM+ 2" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 231 170) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 292 207) (om-make-point 39 28) 100 "100" nil) (om-load-boxcall (quote genfun) "OM* 2" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 252 238) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM/=" (quote om/=) (quote ((om-load-inputfun (quote input-funbox) "a number" "NUM1" 0) (om-load-inputfun (quote input-funbox) "a number" "NUM2" 0))) (om-make-point 162 298) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "NTH 2" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 145 186) nil nil nil nil 1) (om-load-boxcall (quote genfun) "count" (quote counter) (quote ((om-load-inputfun (quote input-funbox) "things to count" "SOMETHING" 1))) (om-make-point 44 198) nil nil nil nil 3) (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" (quote t)) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 245 329) nil nil nil nil 1) (om-load-boxcall (quote genfun) "while" (quote whileloop) (quote ((om-load-inputfun (quote input-funbox) "condition" "EXPR" nil))) (om-make-point 364 710) nil nil nil nil 0) (om-load-boxcall (quote genfun) "OM<" (quote om<) (quote ((om-load-inputfun (quote input-funbox) "a number" "NUM1" 0) (om-load-inputfun (quote input-funbox) "a number" "NUM2" 12))) (om-make-point 418 647) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 407 588) nil nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 235 401) nil nil nil nil 3) (om-load-boxin "input 3" 2 (om-make-point 105 44) "" "input 3" (list 1 0 3 0 5 0 7 0 9 0 11 0) nil) (om-load-boxin "input 2" 1 (om-make-point 55 45) "" nil 7 nil) (om-load-boxin "input" 0 (om-make-point 5 45) "" nil 1 nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 165 604) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil) (om-load-inputfun (quote input-funbox) "other oprations" "MORE" nil) (om-load-inputfun (quote input-funbox) "other oprations" "MORE" nil))) (om-make-point 124 506) nil nil nil 0)) (quote ((1 0 0 0 nil 0) (17 1 2 0 nil 0) (2 0 3 0 nil 0) (20 0 5 0 nil 0) (19 0 5 1 nil 0) (18 0 5 2 nil 0) (11 0 7 0 nil 0) (6 0 7 1 nil 0) (7 0 9 0 nil 0) (8 0 9 1 nil 0) (11 0 10 0 nil 0) (4 0 10 1 nil 0) (12 1 11 0 nil 0) (18 0 11 1 nil 0) (10 0 13 0 nil 0) (9 0 13 1 nil 0) (5 0 13 2 nil 0) (15 0 14 0 nil 0) (16 0 15 0 nil 0) (17 1 16 0 nil 0) (13 0 17 0 nil 0) (17 1 21 0 nil 0) (17 0 22 0 nil 0) (12 0 22 1 nil 0) (3 0 22 2 nil 0))) 1 "omloop" nil) (om-load-boxcall (quote lispfun) "REST 2" (quote rest) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 266 140) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "REST" (quote rest) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 192 111) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SECOND" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 72 120) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 10 122) nil nil nil nil 1) (om-load-boxout "output" 0 (om-make-point 217 331) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxin "input" 0 (om-make-point 55 35) "" nil (list 5 5 0 0 0 0 0 0 0 0 0 0 0 0) nil))) (quote ((7 0 3 0 nil 0) (6 0 3 1 nil 0) (4 0 3 2 nil 0) (5 0 4 0 nil 0) (9 0 5 0 nil 0) (9 0 6 0 nil 0) (9 0 7 0 nil 0) (3 0 8 0 nil 0))) nil 6.080004))